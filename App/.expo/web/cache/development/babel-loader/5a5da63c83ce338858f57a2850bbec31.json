{"ast":null,"code":"var _jsxFileName = \"D:\\\\VNPT Technology\\\\IoT-System\\\\App\\\\views\\\\RegisterForm.jsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { StatusBar } from \"expo-status-bar\";\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\nimport { Formik } from \"formik\";\nimport { validationSchemaRegister } from \"../assets/js/validation\";\nimport { styles } from \"../assets/css/style\";\nimport { style_background } from \"../assets/css/style_background\";\nimport FormField from \"../components/FormField\";\nimport * as SecureStore from 'expo-secure-store';\nimport Background from \"./Background\";\nexport default function RegisterForm(_ref) {\n  var _this = this;\n\n  var navigation = _ref.navigation;\n  return React.createElement(React.Fragment, null, React.createElement(SafeAreaView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), React.createElement(StatusBar, {\n    style: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }), React.createElement(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, React.createElement(KeyboardAwareScrollView, {\n    style: {\n      flex: 1\n    },\n    showsVerticalScrollIndicator: false,\n    keyboardShouldPersistTaps: \"handled\",\n    extraScrollHeight: 150,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      userName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    },\n    enableReinitialize: true,\n    onSubmit: onSubmitHandler,\n    validationSchema: validationSchemaRegister,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, function (_ref2) {\n    var handleChange = _ref2.handleChange,\n        handleBlur = _ref2.handleBlur,\n        handleSubmit = _ref2.handleSubmit,\n        values = _ref2.values,\n        errors = _ref2.errors,\n        touched = _ref2.touched,\n        isValid = _ref2.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(Background, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }), React.createElement(View, {\n      style: style_background.form,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: style_background.textForm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, \"\\u0110\\u0103ng k\\xFD t\\xE0i kho\\u1EA3n\"), React.createElement(FormField, {\n      field: \"userName\",\n      label: \"userName\",\n      autoCapitalize: \"words\",\n      values: values,\n      touched: touched,\n      errors: errors,\n      handleChange: handleChange,\n      handleBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 19\n      }\n    }), React.createElement(FormField, {\n      field: \"email\",\n      label: \"Email Address\",\n      values: values,\n      touched: touched,\n      errors: errors,\n      handleChange: handleChange,\n      handleBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }), React.createElement(FormField, {\n      field: \"password\",\n      label: \"Password\",\n      secureTextEntry: true,\n      values: values,\n      touched: touched,\n      errors: errors,\n      handleChange: handleChange,\n      handleBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }), React.createElement(FormField, {\n      field: \"confirmPassword\",\n      label: \"Confirm Password\",\n      secureTextEntry: true,\n      values: values,\n      touched: touched,\n      errors: errors,\n      handleChange: handleChange,\n      handleBlur: handleBlur,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }), React.createElement(TouchableOpacity, {\n      disabled: !isFormValid(isValid, touched),\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }, React.createElement(View, {\n      style: [style_background.btn, {\n        opacity: isFormValid(isValid, touched) ? 1 : 0.5\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      style: style_background.buttonText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, \"SUBMIT\"))), React.createElement(View, {\n      style: style_background.row,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: \"#fff\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 19\n      }\n    }, \"b\\u1EA1n \\u0111\\xE3 c\\xF3 t\\xE0i kho\\u1EA3n\"), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('login');\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 19\n      }\n    }, React.createElement(Text, {\n      style: style_background.link,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, \"\\u0111\\u0103ng nh\\u1EADp\")))));\n  }))));\n}\n\nfunction getValueFor(key) {\n  var result;\n  return _regeneratorRuntime.async(function getValueFor$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(SecureStore.getItemAsync(key));\n\n        case 2:\n          result = _context.sent;\n\n          if (result) {\n            alert(\"üîê Here's your value üîê \\n\" + result);\n          } else {\n            alert('No values stored under that key.');\n          }\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction onSubmitHandler(values) {\n  return _regeneratorRuntime.async(function onSubmitHandler$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(SecureStore.setItemAsync(values.userName, values.password));\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction isFormValid(isValid, touched) {\n  return isValid && Object.keys(touched).length !== 0;\n}","map":{"version":3,"sources":["D:/VNPT Technology/IoT-System/App/views/RegisterForm.jsx"],"names":["React","StatusBar","KeyboardAwareScrollView","Formik","validationSchemaRegister","styles","style_background","FormField","SecureStore","Background","RegisterForm","navigation","flex","userName","email","password","confirmPassword","onSubmitHandler","handleChange","handleBlur","handleSubmit","values","errors","touched","isValid","form","textForm","isFormValid","btn","opacity","buttonText","row","color","navigate","link","getValueFor","key","getItemAsync","result","alert","setItemAsync","Object","keys","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  SafeAreaView,\r\n  View,StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  Alert,\r\n} from \"react-native\";\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { KeyboardAwareScrollView } from \"react-native-keyboard-aware-scroll-view\";\r\nimport { Formik } from \"formik\";\r\nimport { validationSchemaRegister } from \"../assets/js/validation\";\r\nimport { styles } from \"../assets/css/style\";\r\nimport { style_background } from \"../assets/css/style_background\";\r\nimport FormField from \"../components/FormField\";\r\nimport * as SecureStore from 'expo-secure-store';\r\nimport Background from \"./Background\";\r\n\r\n\r\n\r\nexport default function RegisterForm({navigation}) {\r\n  \r\n  return (\r\n    <>\r\n      <SafeAreaView  />\r\n\r\n      <StatusBar style=\"light\" />\r\n\r\n      <SafeAreaView style={{flex:1}}>\r\n\r\n        <KeyboardAwareScrollView\r\n          style={{flex:1}}\r\n          showsVerticalScrollIndicator={false}\r\n          keyboardShouldPersistTaps=\"handled\"\r\n          extraScrollHeight={150}\r\n        >\r\n         \r\n          <Formik\r\n            initialValues={{\r\n              userName:\"\",\r\n              email: \"\",\r\n              password: \"\",\r\n              confirmPassword: \"\",\r\n            }}\r\n            enableReinitialize\r\n            onSubmit={onSubmitHandler}\r\n            validationSchema={validationSchemaRegister}\r\n          >\r\n            {({\r\n              handleChange,handleBlur,handleSubmit,\r\n              values,errors,touched,isValid,\r\n            }) => (\r\n              <>\r\n                <Background/>\r\n                <View style={style_background.form}>\r\n                  <Text style={style_background.textForm}>ƒêƒÉng k√Ω t√†i kho·∫£n</Text>\r\n                  <FormField\r\n                  field=\"userName\"\r\n                  label=\"userName\"\r\n                  autoCapitalize=\"words\"\r\n                  values={values}\r\n                  touched={touched}\r\n                  errors={errors}\r\n                  handleChange={handleChange}\r\n                  handleBlur={handleBlur}\r\n                />\r\n\r\n              \r\n\r\n                <FormField\r\n                  field=\"email\"\r\n                  label=\"Email Address\"\r\n                  values={values}\r\n                  touched={touched}\r\n                  errors={errors}\r\n                  handleChange={handleChange}\r\n                  handleBlur={handleBlur}\r\n                />\r\n\r\n                <FormField\r\n                  field=\"password\"\r\n                  label=\"Password\"\r\n                  secureTextEntry={true}\r\n                  values={values}\r\n                  touched={touched}\r\n                  errors={errors}\r\n                  handleChange={handleChange}\r\n                  handleBlur={handleBlur}\r\n                />\r\n\r\n                <FormField\r\n                  field=\"confirmPassword\"\r\n                  label=\"Confirm Password\"\r\n                  secureTextEntry={true}\r\n                  values={values}\r\n                  touched={touched}\r\n                  errors={errors}\r\n                  handleChange={handleChange}\r\n                  handleBlur={handleBlur}\r\n                />\r\n\r\n                <TouchableOpacity\r\n                  disabled={!isFormValid(isValid, touched)}\r\n                  onPress={handleSubmit}\r\n                >\r\n                  <View\r\n                    style={[\r\n                      style_background.btn,\r\n                      {\r\n                        opacity: isFormValid(isValid, touched) ? 1 : 0.5,\r\n                      },\r\n                    ]}\r\n                  >\r\n                    <Text style={style_background.buttonText}>SUBMIT</Text>\r\n                  </View>\r\n                </TouchableOpacity>\r\n                <View style={style_background.row}>\r\n                  <Text style={{color:\"#fff\"}}>b·∫°n ƒë√£ c√≥ t√†i kho·∫£n</Text>\r\n                  <TouchableOpacity onPress={() => navigation.navigate('login')}>\r\n                    <Text style={style_background.link}>ƒëƒÉng nh·∫≠p</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n                </View>\r\n                \r\n                \r\n              </>\r\n            )}\r\n          </Formik>\r\n        </KeyboardAwareScrollView>\r\n      </SafeAreaView>\r\n    </>\r\n  );\r\n}\r\n\r\nasync function getValueFor(key) {\r\n  let result = await SecureStore.getItemAsync(key);\r\n  if (result) {\r\n    alert(\"üîê Here's your value üîê \\n\" + result);\r\n  } else {\r\n    alert('No values stored under that key.');\r\n  }\r\n}\r\nasync function onSubmitHandler(values) {\r\n  \r\n    await SecureStore.setItemAsync(values.userName,values.password);\r\n  \r\n}\r\n\r\nfunction isFormValid(isValid, touched) {\r\n  return isValid && Object.keys(touched).length !== 0;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}